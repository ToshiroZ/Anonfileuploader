// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Anon;
//
//    var anonUploadError = AnonUploadError.FromJson(jsonString);

namespace Anon
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AnonUploadError
    {
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Status { get; set; }

        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public Error Error { get; set; }
    }

    public partial class Error
    {
        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public long? Code { get; set; }
    }

    public partial class AnonUploadError
    {
        public static AnonUploadError FromJson(string json) => JsonConvert.DeserializeObject<AnonUploadError>(json, Anon.AnonErrorConverter.Settings);
    }

    public static class AnonErrorSerialize
    {
        public static string ToJson(this AnonUploadError self) => JsonConvert.SerializeObject(self, Anon.AnonErrorConverter.Settings);
    }

    internal static class AnonErrorConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
