// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Anon;
//
//    var anonUploadSuccess = AnonUploadSuccess.FromJson(jsonString);

namespace Anon
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AnonUploadSuccess
    {
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Status { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("file", NullValueHandling = NullValueHandling.Ignore)]
        public File File { get; set; }
    }

    public partial class File
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Url Url { get; set; }

        [JsonProperty("metadata", NullValueHandling = NullValueHandling.Ignore)]
        public Metadata Metadata { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public Size Size { get; set; }
    }

    public partial class Size
    {
        [JsonProperty("bytes", NullValueHandling = NullValueHandling.Ignore)]
        public long? Bytes { get; set; }

        [JsonProperty("readable", NullValueHandling = NullValueHandling.Ignore)]
        public string Readable { get; set; }
    }

    public partial class Url
    {
        [JsonProperty("full", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Full { get; set; }

        [JsonProperty("short", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Short { get; set; }
    }

    public partial class AnonUploadSuccess
    {
        public static AnonUploadSuccess FromJson(string json) => JsonConvert.DeserializeObject<AnonUploadSuccess>(json, Anon.UploadSuccessConverter.Settings);
    }

    public static class UploadSuccessSerialize
    {
        public static string ToJson(this AnonUploadSuccess self) => JsonConvert.SerializeObject(self, Anon.UploadSuccessConverter.Settings);
    }

    internal static class UploadSuccessConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
